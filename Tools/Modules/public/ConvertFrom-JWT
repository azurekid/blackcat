function ConvertFrom-JWT {
    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory = $true,
            ValueFromPipeline = $true,
            Position = 0)]
        $Base64JWT
    )

    Begin {
    }
    Process {
        $Spl = $Base64JWT.Split(".")
        [PSCustomObject] @{
            Header  = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String((Invoke-SplitJWT $Spl[0]))) | ConvertFrom-Json
            Payload = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String((Invoke-SplitJWT $Spl[1]))) | ConvertFrom-Json
        }

    }
    End {
    }
}

function Invoke-SplitJWT {
    Param
    (
        [Parameter(Mandatory = $true,
            ValueFromPipeline = $true,
            Position = 0)]
        $String
    )

    Process {
        $Length = $String.Length
        if ($String.Length % 4 -ne 0) {
            $Length += 4 - ($String.Length % 4)
        }
        return $String.PadRight($Length, "=")
    }
}

function Explain-JWT {
    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory = $true,
            ValueFromPipeline = $true,
            Position = 0)]
        $Payload
    )

    Begin {
        $Roles = Get-Content -Path ./roles.csv | ConvertFrom-Csv
    }
    Process {
        foreach ($Role in $Payload.Payload.wids) {
            Write-Host ($Roles | Where-Object { $_.ID -eq $Role }).displayName
        }
    }
    End {
    }
}